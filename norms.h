#ifndef NORMS_H_WCEAFYHV
#define NORMS_H_WCEAFYHV

/*
 * =====================================================================================
 *
 *       Filename:  norms.h
 *
 *    Description:  Header file containg norm calculating functions.
 *
 *        Version:  1.0
 *        Created:  17/02/16 10:07:46
 *       Revision:  none
 *       Compiler:  gcc
 *
 *         Author:  Michael Tierney (MT), tiernemi@tcd.ie
 *
 * =====================================================================================
 */

#include "matrix.h"
#include <math.h>

/* 
 * ===  FUNCTION  ======================================================================
 *         Name:  getMaxNorm
 *    Arguments:  Matrix * mat - Matrix that we're finding the max norm of.
 *      Returns:  The max norm of the Matrix.
 *  Description:  This function finds the max norm of the matrix. This norm is simply
 *                the largest absolute element in the matrix.
 * =====================================================================================
 */

float getMaxNorm(Matrix * mat) {
	int i ;
	float largestElement = 0.f ;
	int totalLength = mat->numRows*mat->numCols ;
	for (i = 0 ; i < totalLength ; ++i) {
		float absVal = fabs(mat->data[i]) ;
		if (absVal > largestElement) {
			largestElement = absVal ;
		}
	}
	return largestElement ;
}		/* -----  end of function getMaxNorm  ----- */


/* 
 * ===  FUNCTION  ======================================================================
 *         Name:  getFrobeniusNorm
 *    Arguments:  Matrix * mat - Matrix that we're finding the Frobenius norm of.
 *      Returns:  The Frobenius norm of the matrix.
 *  Description:  This function finds the Frobenius norm of the Matrix. The Frobenius
 *                norm is square root of the sum of the squares of each element.
 * =====================================================================================
 */

float getFrobeniusNorm(Matrix * mat) {
	int i ;
	double sumOfSquares = 0. ;
	int totalLength = mat->numRows*mat->numCols ;
	for (i = 0 ; i < totalLength ; ++i) {
		sumOfSquares += powf(mat->data[i],2) ;
	}	
	return sqrt(sumOfSquares);
}		/* -----  end of function getFrobeniusNorm  ----- */


/* 
 * ===  FUNCTION  ======================================================================
 *         Name:  getOneInducedNorm
 *    Arguments:  Matrix * mat - Matrix that we're finding the one-induced norm of.
 *      Returns:  The one-induced norm of the matrix.
 *  Description:  This function finds the one-induced norm of the Matrix. This norm is
 *                maximum of the values generated by summing the absolute values 
 *                of the columns.
 * =====================================================================================
 */

float getOneInducedNorm(Matrix * mat) {
	int i,j ;
	float largestColSum = 0.f ;
	for (j = 0 ; j < mat->numCols ; ++j) {
		float colSum = 0 ;
		for (i = 0 ; i < mat->numRows ; ++i) {
			colSum += fabs(getElement(mat,i,j)) ;
		}
		if (colSum > largestColSum) {
			largestColSum = colSum ;
		}
	}
	return largestColSum ;
}		/* -----  end of function getOneInducedNorm  ----- */


/* 
 * ===  FUNCTION  ======================================================================
 *         Name:  getInfInducedNorm
 *    Arguments:  Matrix * mat - Matrix that we're finding the inf-induced norm of.
 *      Returns:  The inf-induced norm of the matrix.
 *  Description:  This function finds the inf-induced norm of the Matrix. This norm is
 *                maximum of the values generated by summing the absolute values 
 *                of the rows.
 * =====================================================================================
 */

float getInfInducedNorm(Matrix * mat) {
	int i,j ;
	float largestRowSum = 0.f ;
	for (i = 0 ; i < mat->numRows ; ++i) {
		float rowSum = 0.f ;
		for (j = 0 ; j < mat->numCols ; ++j) {
			rowSum += fabs(getElement(mat,i,j)) ;
		}
		if (rowSum > largestRowSum) {
			largestRowSum = rowSum ;
		}
	}
	return largestRowSum ;
}		/* -----  end of function getInfInducedNorm  ----- */

#endif /* end of include guard: NORMS_H_WCEAFYHV */
